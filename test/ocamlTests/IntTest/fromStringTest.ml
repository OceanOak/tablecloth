test "fromString("0")" (fun () -> expect (Int.fromString "0") |> toEqual (let open Eq in option int) Some(0)) ; 
test "fromString("-0")" (fun () -> expect (Int.fromString "-0") |> toEqual (let open Eq in option int) Some(-0)) ; 
test "fromString("42")" (fun () -> expect (Int.fromString "42") |> toEqual (let open Eq in option int) Some(42)) ; 
test "fromString("123_456")" (fun () -> expect (Int.fromString "123_456") |> toEqual (let open Eq in option int) Some(123_456)) ; 
test "fromString("-42")" (fun () -> expect (Int.fromString "-42") |> toEqual (let open Eq in option int) Some(-42)) ; 
test "fromString("0XFF")" (fun () -> expect (Int.fromString "0XFF") |> toEqual (let open Eq in option int) Some(255)) ; 
test "fromString("0X000A")" (fun () -> expect (Int.fromString "0X000A") |> toEqual (let open Eq in option int) Some(10)) ; 
test "fromString("Infinity")" (fun () -> expect (Int.fromString "Infinity") |> toEqual (let open Eq in option int) None) ; 
test "fromString("-Infinity")" (fun () -> expect (Int.fromString "-Infinity") |> toEqual (let open Eq in option int) None) ; 
test "fromString("NaN")" (fun () -> expect (Int.fromString "NaN") |> toEqual (let open Eq in option int) None) ; 
test "fromString("abc")" (fun () -> expect (Int.fromString "abc") |> toEqual (let open Eq in option int) None) ; 
test "fromString("--4")" (fun () -> expect (Int.fromString "--4") |> toEqual (let open Eq in option int) None) ; 
test "fromString(" ")" (fun () -> expect (Int.fromString " ") |> toEqual (let open Eq in option int) None) ; 
