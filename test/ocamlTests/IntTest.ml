test "absolute(8)" (fun () -> expect (absolute 8) |> toEqual Eq.int 8) ; 
test "absolute(-7)" (fun () -> expect (absolute -7) |> toEqual Eq.int 7) ; 
test "absolute(0)" (fun () -> expect (absolute 0) |> toEqual Eq.int 0) ; 
test "add(1,2)" (fun () -> expect (add 1 2) |> toEqual Eq.int 3) ; 
test "add(1,1)" (fun () -> expect (add 1 1) |> toEqual Eq.int 2) ; 
test "clamp(5,0,8)" (fun () -> expect (clamp 5 0 8) |> toEqual Eq.int 5) ; 
test "clamp(9,0,8)" (fun () -> expect (clamp 9 0 8) |> toEqual Eq.int 8) ; 
test "clamp(1,2,8)" (fun () -> expect (clamp 1 2 8) |> toEqual Eq.int 2) ; 
test "clamp(5,-10,-5)" (fun () -> expect (clamp 5 -10 -5) |> toEqual Eq.int -5) ; 
test "clamp(-15,-10,-5)" (fun () -> expect (clamp -15 -10 -5) |> toEqual Eq.int -10) ; 
test "clamp(3,7,1)" (fun () -> expect (fun () -> clamp 3 7 1) |> toThrow); 
test "divide(3,2)" (fun () -> expect (divide 3 2) |> toEqual Eq.int 1) ; 
test "divide(3,0)" (fun () -> expect (fun () -> divide 3 0) |> toThrow); 
test "divide(27,5)" (fun () -> expect (divide 27 5) |> toEqual Eq.int 5) ; 
test "divideFloat(3,2)" (fun () -> expect (divideFloat 3 2) |> toEqual Eq.int 1.5) ; 
test "divideFloat(27,5)" (fun () -> expect (divideFloat 27 5) |> toEqual Eq.int 5.4) ; 
test "divideFloat(8,4)" (fun () -> expect (divideFloat 8 4) |> toEqual Eq.int 2) ; 
test "divideFloat(8,0)" (fun () -> expect (divideFloat 8 0) |> toEqual Eq.int Float.infinity) ; 
test "divideFloat(-8,0)" (fun () -> expect (divideFloat -8 0) |> toEqual Eq.int Float.negativeInfinity) ; 
test "fromString("0")" (fun () -> expect (fromString "0") |> toEqual Eq.int Some(0)) ; 
test "fromString("-0")" (fun () -> expect (fromString "-0") |> toEqual Eq.int Some(-0)) ; 
test "fromString("42")" (fun () -> expect (fromString "42") |> toEqual Eq.int Some(42)) ; 
test "fromString("123_456")" (fun () -> expect (fromString "123_456") |> toEqual Eq.int Some(123_456)) ; 
test "fromString("-42")" (fun () -> expect (fromString "-42") |> toEqual Eq.int Some(-42)) ; 
test "fromString("0XFF")" (fun () -> expect (fromString "0XFF") |> toEqual Eq.int Some(255)) ; 
test "fromString("0X000A")" (fun () -> expect (fromString "0X000A") |> toEqual Eq.int Some(10)) ; 
test "fromString("Infinity")" (fun () -> expect (fromString "Infinity") |> toEqual Eq.int None) ; 
test "fromString("-Infinity")" (fun () -> expect (fromString "-Infinity") |> toEqual Eq.int None) ; 
test "fromString("NaN")" (fun () -> expect (fromString "NaN") |> toEqual Eq.int None) ; 
test "fromString("abc")" (fun () -> expect (fromString "abc") |> toEqual Eq.int None) ; 
test "fromString("--4")" (fun () -> expect (fromString "--4") |> toEqual Eq.int None) ; 
test "fromString(" ")" (fun () -> expect (fromString " ") |> toEqual Eq.int None) ; 
test "maximum(8,18)" (fun () -> expect (maximum 8 18) |> toEqual Eq.int 18) ; 
test "maximum(5,0)" (fun () -> expect (maximum 5 0) |> toEqual Eq.int 5) ; 
test "maximum(-4,-1)" (fun () -> expect (maximum -4 -1) |> toEqual Eq.int -1) ; 
test "power(7,3)" (fun () -> expect (power 7 3) |> toEqual Eq.int 343) ; 
test "power(0,3)" (fun () -> expect (power 0 3) |> toEqual Eq.int 0) ; 
test "power(7,0)" (fun () -> expect (power 7 0) |> toEqual Eq.int 1) ; 
test "subtract(4,3)" (fun () -> expect (subtract 4 3) |> toEqual Eq.int 1) ; 
