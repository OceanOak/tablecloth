test "absolute(8)" (fun () -> expect (Int.absolute 8) |> toEqual Eq.int 8) ; 
test "absolute(-7)" (fun () -> expect (Int.absolute -7) |> toEqual Eq.int 7) ; 
test "absolute(0)" (fun () -> expect (Int.absolute 0) |> toEqual Eq.int 0) ; 
test "add(1,2)" (fun () -> expect (Int.add 1 2) |> toEqual Eq.int 3) ; 
test "add(1,1)" (fun () -> expect (Int.add 1 1) |> toEqual Eq.int 2) ; 
test "clamp(5,0,8)" (fun () -> expect (Int.clamp 5 0 8) |> toEqual Eq.int 5) ; 
test "clamp(9,0,8)" (fun () -> expect (Int.clamp 9 0 8) |> toEqual Eq.int 8) ; 
test "clamp(1,2,8)" (fun () -> expect (Int.clamp 1 2 8) |> toEqual Eq.int 2) ; 
test "clamp(5,-10,-5)" (fun () -> expect (Int.clamp 5 -10 -5) |> toEqual Eq.int -5) ; 
test "clamp(-15,-10,-5)" (fun () -> expect (Int.clamp -15 -10 -5) |> toEqual Eq.int -10) ; 
test "clamp(3,7,1)" (fun () -> expect (fun () -> Int.clamp 3 7 1) |> toThrow); 
test "divide(3,2)" (fun () -> expect (Int.divide 3 2) |> toEqual Eq.int 1) ; 
test "divide(3,0)" (fun () -> expect (fun () -> Int.divide 3 0) |> toThrow); 
test "divide(27,5)" (fun () -> expect (Int.divide 27 5) |> toEqual Eq.int 5) ; 
test "divideFloat(3,2)" (fun () -> expect (Int.divideFloat 3 2) |> toEqual Eq.int 1.5) ; 
test "divideFloat(27,5)" (fun () -> expect (Int.divideFloat 27 5) |> toEqual Eq.int 5.4) ; 
test "divideFloat(8,4)" (fun () -> expect (Int.divideFloat 8 4) |> toEqual Eq.int 2) ; 
test "divideFloat(8,0)" (fun () -> expect (Int.divideFloat 8 0) |> toEqual Eq.int Float.infinity) ; 
test "divideFloat(-8,0)" (fun () -> expect (Int.divideFloat -8 0) |> toEqual Eq.int Float.negativeInfinity) ; 
test "maximum(8,18)" (fun () -> expect (Int.maximum 8 18) |> toEqual Eq.int 18) ; 
test "maximum(5,0)" (fun () -> expect (Int.maximum 5 0) |> toEqual Eq.int 5) ; 
test "maximum(-4,-1)" (fun () -> expect (Int.maximum -4 -1) |> toEqual Eq.int -1) ; 
test "power(7,3)" (fun () -> expect (Int.power 7 3) |> toEqual Eq.int 343) ; 
test "power(0,3)" (fun () -> expect (Int.power 0 3) |> toEqual Eq.int 0) ; 
test "power(7,0)" (fun () -> expect (Int.power 7 0) |> toEqual Eq.int 1) ; 
test "subtract(4,3)" (fun () -> expect (Int.subtract 4 3) |> toEqual Eq.int 1) ; 
