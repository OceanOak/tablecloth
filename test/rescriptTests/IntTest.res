test ("absolute(8)", () => expect(absolute(8)) |> toEqual(Eq.int, 8)) 
test ("absolute(-7)", () => expect(absolute(-7)) |> toEqual(Eq.int, 7)) 
test ("absolute(0)", () => expect(absolute(0)) |> toEqual(Eq.int, 0)) 
test ("add(1,2)", () => expect(add(1,2)) |> toEqual(Eq.int, 3)) 
test ("add(1,1)", () => expect(add(1,1)) |> toEqual(Eq.int, 2)) 
test ("clamp(5,0,8)", () => expect(clamp(5,0,8)) |> toEqual(Eq.int, 5)) 
test ("clamp(9,0,8)", () => expect(clamp(9,0,8)) |> toEqual(Eq.int, 8)) 
test ("clamp(1,2,8)", () => expect(clamp(1,2,8)) |> toEqual(Eq.int, 2)) 
test ("clamp(5,-10,-5)", () => expect(clamp(5,-10,-5)) |> toEqual(Eq.int, -5)) 
test ("clamp(-15,-10,-5)", () => expect(clamp(-15,-10,-5)) |> toEqual(Eq.int, -10)) 
test ("clamp(3,7,1)", () => expect(() => clamp(3,7,1)) |> toThrow) 
test ("divide(3,2)", () => expect(divide(3,2)) |> toEqual(Eq.int, 1)) 
test ("divide(3,0)", () => expect(() => divide(3,0)) |> toThrow) 
test ("divide(27,5)", () => expect(divide(27,5)) |> toEqual(Eq.int, 5)) 
test ("divideFloat(3,2)", () => expect(divideFloat(3,2)) |> toEqual(Eq.int, 1.5)) 
test ("divideFloat(27,5)", () => expect(divideFloat(27,5)) |> toEqual(Eq.int, 5.4)) 
test ("divideFloat(8,4)", () => expect(divideFloat(8,4)) |> toEqual(Eq.int, 2)) 
test ("divideFloat(8,0)", () => expect(divideFloat(8,0)) |> toEqual(Eq.int, Float.infinity)) 
test ("divideFloat(-8,0)", () => expect(divideFloat(-8,0)) |> toEqual(Eq.int, Float.negativeInfinity)) 
test ("fromString(0)", () => expect(fromString("0")) |> toEqual(Eq.int, Some(0))) 
test ("fromString(-0)", () => expect(fromString("-0")) |> toEqual(Eq.int, Some(-0))) 
test ("fromString(42)", () => expect(fromString("42")) |> toEqual(Eq.int, Some(42))) 
test ("fromString(123_456)", () => expect(fromString("123_456")) |> toEqual(Eq.int, Some(123_456))) 
test ("fromString(-42)", () => expect(fromString("-42")) |> toEqual(Eq.int, Some(-42))) 
test ("fromString(0XFF)", () => expect(fromString("0XFF")) |> toEqual(Eq.int, Some(255))) 
test ("fromString(0X000A)", () => expect(fromString("0X000A")) |> toEqual(Eq.int, Some(10))) 
test ("fromString(Infinity)", () => expect(fromString("Infinity")) |> toEqual(Eq.int, None)) 
test ("fromString(-Infinity)", () => expect(fromString("-Infinity")) |> toEqual(Eq.int, None)) 
test ("fromString(NaN)", () => expect(fromString("NaN")) |> toEqual(Eq.int, None)) 
test ("fromString(abc)", () => expect(fromString("abc")) |> toEqual(Eq.int, None)) 
test ("fromString(--4)", () => expect(fromString("--4")) |> toEqual(Eq.int, None)) 
test ("fromString( )", () => expect(fromString(" ")) |> toEqual(Eq.int, None)) 
test ("maximum(8 18)", () => expect(maximum(8,18)) |> toEqual(Eq.int, 18)) 
test ("maximum(5 0)", () => expect(maximum(5,0)) |> toEqual(Eq.int, 5)) 
test ("maximum(-4 -1)", () => expect(maximum(-4,-1)) |> toEqual(Eq.int, -1)) 
test ("power(7 3)", () => expect(power(7,3)) |> toEqual(Eq.int, 343)) 
test ("power(0 3)", () => expect(power(0,3)) |> toEqual(Eq.int, 0)) 
test ("power(7 0)", () => expect(power(7,0)) |> toEqual(Eq.int, 1)) 
test ("subtract(4 3)", () => expect(subtract(4,3)) |> toEqual(Eq.int, 1)) 
